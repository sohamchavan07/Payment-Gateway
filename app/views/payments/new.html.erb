 

<div class="pg-container">
  <div class="pg-card">
    <h2 class="pg-title">Stripe PaymentIntent Demo</h2>

    <form id="payment-form" novalidate aria-describedby="error success">
      <div class="pg-grid pg-grid-2">
        <div class="pg-field">
          <label class="pg-label" for="amount">Amount (in rupees)</label>
          <input class="pg-input" id="amount" name="amount" type="number" inputmode="decimal" min="1" step="0.01" value="<%= (params[:amount].presence || 199).to_f.round(2) %>" placeholder="199.00" required aria-required="true" />
          <div class="pg-help">Enter rupees, e.g. 199.00 → will charge ₹199.00</div>
        </div>

        <div class="pg-field">
          <label class="pg-label" for="currency">Currency</label>
          <input class="pg-input" id="currency" name="currency" type="text" value="<%= (params[:currency] || 'INR').to_s.upcase %>" maxlength="3" autocapitalize="characters" required />
        </div>

      <div class="pg-field">
        <label class="pg-label" for="full_name">Full name</label>
        <input class="pg-input" id="full_name" name="full_name" type="text" value="<%= params[:full_name] %>" placeholder="Jane Doe" required />
      </div>

      <div class="pg-field" style="margin-top:12px;">
        <label class="pg-label" for="card-element">Card details</label>
        <div id="card-element" class="pg-card-element"></div>
      </div>

      <div class="pg-actions">
        <button id="pay-button" type="submit" class="pg-btn" aria-live="polite">
          <span class="pg-btn-text">Pay</span>
          <span class="pg-btn-loading" style="display:none;"><span class="pg-spinner"></span></span>
        </button>
        <span id="message" class="pg-msg" aria-live="polite"></span>
      </div>

      <div id="error" class="pg-msg pg-error" role="alert" aria-live="assertive"></div>
      <div id="success" class="pg-msg pg-success" aria-live="polite"></div>

      <input type="hidden" id="stripe-publishable-key" value="<%= ENV['STRIPE_PUBLISHABLE_KEY'] %>" />
      <input type="hidden" id="payment-intents-url" value="<%= url_for('/payment_intents') %>" />
      <input type="hidden" id="csrf-token" value="<%= form_authenticity_token %>" />
      <input type="hidden" id="order_id" value="<%= params[:order_id] %>" />
      <%= csrf_meta_tags %>
    </form>
  </div> 
  
</div>

<script src="https://js.stripe.com/v3/"></script>
<script>
  document.addEventListener('DOMContentLoaded', async () => {
    const publishableKey = document.getElementById('stripe-publishable-key').value;
    if (!publishableKey) {
      const err = document.getElementById('error');
      err.textContent = 'Stripe publishable key is not configured.';
      return;
    }
    const stripe = Stripe(publishableKey);
    const elements = stripe.elements();
    const card = elements.create('card');
    card.mount('#card-element');

    const form = document.getElementById('payment-form');
    const message = document.getElementById('message');
    const errorEl = document.getElementById('error');
    const successEl = document.getElementById('success');
    const payBtn = document.getElementById('pay-button');
    const btnText = payBtn.querySelector('.pg-btn-text');
    const btnLoading = payBtn.querySelector('.pg-btn-loading');
    const intentsUrl = document.getElementById('payment-intents-url').value;
    const csrfToken = document.getElementById('csrf-token').value;

    function setLoading(loading, label = 'Processing...') {
      payBtn.disabled = loading;
      btnText.style.display = loading ? 'none' : 'inline';
      btnLoading.style.display = loading ? 'inline' : 'none';
      message.textContent = loading ? label : '';
    }

    form.addEventListener('submit', async (e) => {
      e.preventDefault();
      errorEl.textContent = '';
      successEl.textContent = '';
      setLoading(true, 'Validating...');

      // Basic client-side validation
      const amountRupeesStr = document.getElementById('amount').value;
      const currencyStr = (document.getElementById('currency').value || '').toUpperCase().trim();
      const fullNameStr = (document.getElementById('full_name').value || '').trim();

      const amountRupees = parseFloat(amountRupeesStr);
      if (!Number.isFinite(amountRupees) || amountRupees <= 0) {
        setLoading(false);
        errorEl.textContent = 'Please enter a valid amount in rupees.';
        return;
      }
      if (!/^[A-Z]{3}$/.test(currencyStr)) {
        setLoading(false);
        errorEl.textContent = 'Please enter a valid 3-letter currency code.';
        return;
      }
      if (fullNameStr.length < 2) {
        setLoading(false);
        errorEl.textContent = 'Please enter your full name.';
        return;
      }

      setLoading(true, 'Creating PaymentIntent...');

      // Convert rupees to paise (integer) for the backend/Stripe
      const amountPaise = Math.round(amountRupees * 100);
      const payload = {
        amount: amountPaise,
        currency: currencyStr,
        order_id: document.getElementById('order_id').value,
        full_name: fullNameStr
      };

      let clientSecret;
      try {
        const res = await fetch(intentsUrl, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'X-CSRF-Token': csrfToken
          },
          body: JSON.stringify(payload)
        });
        const data = await res.json();
        if (!res.ok) {
          throw new Error(data.error || 'Failed to create PaymentIntent');
        }
        clientSecret = data.client_secret;
      } catch (err) {
        setLoading(false);
        errorEl.textContent = err.message || 'Failed to create PaymentIntent';
        return;
      }

      message.textContent = 'Confirming payment...';
      let result;
      try {
        result = await stripe.confirmCardPayment(clientSecret, {
          payment_method: {
            card: card,
            billing_details: { name: payload.full_name }
          }
        });
      } catch (err) {
        setLoading(false);
        errorEl.textContent = err.message || 'Payment failed';
        return;
      }

      setLoading(false);
      const { error, paymentIntent } = result || {};
      if (error) {
        errorEl.textContent = error.message || 'Payment failed';
      } else if (paymentIntent && paymentIntent.status === 'succeeded') {
        successEl.textContent = 'Payment succeeded!';
      } else {
        errorEl.textContent = 'Payment status: ' + (paymentIntent && paymentIntent.status);
      }
    });
  });
</script>
