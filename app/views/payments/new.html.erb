<style>
  .pg-container { max-width: 640px; margin: 24px auto; padding: 16px; }
  .pg-card { background: #ffffff; border: 1px solid #e5e7eb; border-radius: 12px; padding: 20px; box-shadow: 0 1px 2px rgba(0,0,0,0.04); }
  .pg-title { margin: 0 0 16px; font-size: 22px; line-height: 28px; }
  .pg-grid { display: grid; grid-template-columns: 1fr; gap: 12px; }
  @media (min-width: 600px) { .pg-grid-2 { grid-template-columns: 1fr 1fr; } }
  .pg-field { display: flex; flex-direction: column; gap: 6px; }
  .pg-label { font-size: 14px; color: #374151; }
  .pg-input { padding: 10px 12px; border: 1px solid #d1d5db; border-radius: 8px; font-size: 16px; }
  .pg-help { font-size: 12px; color: #6b7280; }
  .pg-card-element { padding: 10px 12px; border: 1px solid #d1d5db; border-radius: 8px; background: #fafafa; }
  .pg-actions { margin-top: 8px; display: flex; align-items: center; gap: 10px; }
  .pg-btn { appearance: none; border: none; border-radius: 8px; background: #0ea5e9; color: #fff; font-weight: 600; padding: 10px 14px; cursor: pointer; }
  .pg-btn[disabled] { opacity: 0.6; cursor: not-allowed; }
  .pg-msg { margin-top: 8px; font-size: 14px; }
  .pg-error { color: #dc2626; }
  .pg-success { color: #16a34a; }
  .pg-spinner { width: 16px; height: 16px; border: 2px solid rgba(255,255,255,0.6); border-top-color: #ffffff; border-radius: 9999px; display: inline-block; animation: pg-spin 0.9s linear infinite; }
  @keyframes pg-spin { to { transform: rotate(360deg); } }
</style>

<div class="pg-container">
  <div class="pg-card">
    <h2 class="pg-title">Stripe PaymentIntent Demo</h2>

    <form id="payment-form" novalidate>
      <div class="pg-grid pg-grid-2">
        <div class="pg-field">
          <label class="pg-label" for="amount">Amount (in paise/cents)</label>
          <input class="pg-input" id="amount" name="amount" type="number" inputmode="numeric" min="1" step="1" value="49900" required />
          <div class="pg-help">Example: 49900 = â‚¹499.00</div>
        </div>

        <div class="pg-field">
          <label class="pg-label" for="currency">Currency</label>
          <input class="pg-input" id="currency" name="currency" type="text" value="INR" maxlength="3" autocapitalize="characters" required />
        </div>

      <div class="pg-field" style="margin-top:12px;">
        <label class="pg-label" for="card-element">Card details</label>
        <div id="card-element" class="pg-card-element"></div>
      </div>

      <div class="pg-actions">
        <button id="pay-button" type="submit" class="pg-btn">
          <span class="pg-btn-text">Pay</span>
          <span class="pg-btn-loading" style="display:none;"><span class="pg-spinner"></span></span>
        </button>
        <span id="message" class="pg-msg" aria-live="polite"></span>
      </div>

      <div id="error" class="pg-msg pg-error" role="alert" aria-live="assertive"></div>
      <div id="success" class="pg-msg pg-success" aria-live="polite"></div>

      <input type="hidden" id="stripe-publishable-key" value="<%= ENV['STRIPE_PUBLISHABLE_KEY'] %>" />
      <input type="hidden" id="payment-intents-url" value="<%= url_for('/payment_intents') %>" />
      <input type="hidden" id="csrf-token" value="<%= form_authenticity_token %>" />
      <%= csrf_meta_tags %>
    </form>
  </div>
  
</div>

<script src="https://js.stripe.com/v3/"></script>
<script>
  document.addEventListener('DOMContentLoaded', async () => {
    const publishableKey = document.getElementById('stripe-publishable-key').value;
    const stripe = Stripe(publishableKey);
    const elements = stripe.elements();
    const card = elements.create('card');
    card.mount('#card-element');

    const form = document.getElementById('payment-form');
    const message = document.getElementById('message');
    const errorEl = document.getElementById('error');
    const successEl = document.getElementById('success');
    const payBtn = document.getElementById('pay-button');
    const btnText = payBtn.querySelector('.pg-btn-text');
    const btnLoading = payBtn.querySelector('.pg-btn-loading');
    const intentsUrl = document.getElementById('payment-intents-url').value;
    const csrfToken = document.getElementById('csrf-token').value;

    function setLoading(loading, label = 'Processing...') {
      payBtn.disabled = loading;
      btnText.style.display = loading ? 'none' : 'inline';
      btnLoading.style.display = loading ? 'inline' : 'none';
      message.textContent = loading ? label : '';
    }

    form.addEventListener('submit', async (e) => {
      e.preventDefault();
      errorEl.textContent = '';
      successEl.textContent = '';
      setLoading(true, 'Creating PaymentIntent...');

      const payload = {
        amount: document.getElementById('amount').value,
        currency: document.getElementById('currency').value,
        order_id: document.getElementById('order_id').value,
        customer_email: document.getElementById('customer_email').value
      };

      let clientSecret;
      try {
        const res = await fetch(intentsUrl, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'X-CSRF-Token': csrfToken
          },
          body: JSON.stringify(payload)
        });
        const data = await res.json();
        if (!res.ok) {
          throw new Error(data.error || 'Failed to create PaymentIntent');
        }
        clientSecret = data.client_secret;
      } catch (err) {
        setLoading(false);
        errorEl.textContent = err.message;
        return;
      }

      message.textContent = 'Confirming payment...';
      let result;
      try {
        result = await stripe.confirmCardPayment(clientSecret, {
          payment_method: {
            card: card,
            billing_details: { email: payload.customer_email }
          }
        });
      } catch (err) {
        setLoading(false);
        errorEl.textContent = err.message || 'Payment failed';
        return;
      }

      setLoading(false);
      const { error, paymentIntent } = result || {};
      if (error) {
        errorEl.textContent = error.message || 'Payment failed';
      } else if (paymentIntent && paymentIntent.status === 'succeeded') {
        successEl.textContent = 'Payment succeeded!';
      } else {
        errorEl.textContent = 'Payment status: ' + (paymentIntent && paymentIntent.status);
      }
    });
  });
</script>
